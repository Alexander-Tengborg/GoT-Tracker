{"version":3,"sources":["Episode.js","Season.js","App.js","serviceWorker.js","index.js"],"names":["notWatchedColor","Episode","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","onEpisodeClick","bind","assertThisInitialized","episode","watched","react_default","a","createElement","className","style","backgroundColor","onClick","React","Component","Season","season","_this2","episodes","data","map","src_Episode_0","key","seasonData","App","watchedData","getWatchedData","episodeCount","length","watchedCount","countWatchedEpisodes","todayDate","Date","getTime","lastDate","daysLeft","Math","round","seasonCount","episodesPerDay","localStorage","getItem","JSON","parse","createEmptyWatched","setState","setItem","stringify","seasons","i","src_Season_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.028e1302.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Episode.css';\r\n\r\nconst watchedColor = '#527B4D';\r\nconst notWatchedColor = '#712D39';\r\n\r\nclass Episode extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            color: notWatchedColor\r\n        }\r\n\r\n        this.onEpisodeClick = this.onEpisodeClick.bind(this);\r\n    }\r\n\r\n    onEpisodeClick() {\r\n        this.props.onEpisodeClick(this.props.episode);\r\n    }\r\n\r\n    render() {\r\n\r\n        let color = this.props.watched === true ? watchedColor : notWatchedColor;\r\n\r\n        return (\r\n            <div className='episode' style={{backgroundColor: color}} onClick={this.onEpisodeClick}>\r\n                <h1>{this.props.episode + 1}</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Episode;\r\n","import React from 'react';\r\nimport './Season.css';\r\n\r\nimport Episode from './Episode';\r\n\r\nclass Season extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onEpisodeClick = this.onEpisodeClick.bind(this);\r\n    }\r\n\r\n    onEpisodeClick(episode) {\r\n        this.props.onEpisodeClick(this.props.season, episode);\r\n    }\r\n\r\n    render() {\r\n\r\n        const episodes = this.props.data.map((watched, episode) => {\r\n            return <Episode key={this.props.season + episode} watched={watched} episode={episode} onEpisodeClick={this.onEpisodeClick} />\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <h3>Season {this.props.season}:</h3>\r\n                <div className='season'>\r\n                    {episodes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Season;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Season from './Season';\r\n\r\nconst seasonData = [\r\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n  [1, 2, 3, 4, 5, 6, 7],\r\n  [1, 2, 3, 4, 5, 6]\r\n] \r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n      let watchedData = this.getWatchedData();\r\n\r\n      let episodeCount = -1;\r\n      seasonData.map((season) => episodeCount += season.length);\r\n\r\n      let watchedCount = this.countWatchedEpisodes(watchedData);\r\n      \r\n      let todayDate = new Date().getTime();\r\n      let lastDate = new Date('May 19, 2019 03:00:00').getTime();\r\n      let daysLeft =  Math.round((lastDate - todayDate) / (1000 * 60 * 60 * 24));\r\n\r\n      this.state = {\r\n        episodeCount,\r\n        seasonCount: seasonData.length,\r\n        watchedCount,\r\n        watchedData,\r\n        todayDate,\r\n        lastDate,\r\n        daysLeft,\r\n        episodesPerDay: (episodeCount - watchedCount) / daysLeft \r\n      }\r\n      \r\n      this.onEpisodeClick = this.onEpisodeClick.bind(this);\r\n      this.countWatchedEpisodes = this.countWatchedEpisodes.bind(this);\r\n    }\r\n\r\n    getWatchedData() {\r\n      let watchedData = localStorage.getItem('data');\r\n\r\n      if(watchedData !== null && watchedData !== 'null') return JSON.parse(watchedData);\r\n      \r\n      return this.createEmptyWatched();\r\n    }\r\n\r\n    createEmptyWatched() {\r\n      let watchedData = seasonData.map((season) => {\r\n        return season.map((episode) => {\r\n          return false\r\n        });\r\n      });\r\n\r\n      return watchedData;\r\n    }\r\n\r\n    countWatchedEpisodes(watchedData) {\r\n      let watchedCount = 0;\r\n      watchedData.map((season) => {\r\n        season.map((episode) => {\r\n          if(episode) watchedCount++;\r\n        })\r\n      });\r\n\r\n      return watchedCount;\r\n    }\r\n\r\n    onEpisodeClick(season, episode) {\r\n      season--;\r\n      let watchedData = this.state.watchedData;\r\n\r\n      watchedData[season][episode] = !watchedData[season][episode];\r\n      \r\n      let watchedCount = this.countWatchedEpisodes(watchedData)\r\n\r\n      this.setState({\r\n        watchedData,\r\n        watchedCount,\r\n        episodesPerDay: (this.state.episodeCount - watchedCount) / this.state.daysLeft \r\n      });\r\n\r\n      localStorage.setItem('data', JSON.stringify(watchedData));\r\n\r\n    }\r\n\r\n    render() {\r\n      const seasons = this.state.watchedData.map((season, i) => {\r\n        return <Season key={season + i} data={season} season={i + 1} onEpisodeClick={this.onEpisodeClick} />\r\n      })\r\n\r\n      return (\r\n          <div>\r\n            <h1>Game of Thrones Tracker</h1>\r\n            <h2>You have watched {this.state.watchedCount} out of the {this.state.episodeCount} episodes. (Not including the last episode)</h2>\r\n            <h2>If you wish to finish GoT before the last episode air, you will have to watch roughly {this.state.episodesPerDay} episodes per day.</h2>\r\n            {seasons}\r\n          </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}